<table class="table table-striped">
	<RepeaterComponent Items="servers">
		<Header>
			<thead>
				<tr>
					<th>Name</th>

					<th>City</th>

					<th>Status</th>

					<th>People Online</th>

					<th></th>
					<th></th>
				</tr>
			</thead>
		</Header>
		<Row Context="server">
			<ServerComponent Server="server"></ServerComponent>
		</Row>
	</RepeaterComponent>
</table>

@code {

	[Parameter]
	public string? CityName { get; set; }

	[Parameter]
	public string ServerFilter { get; set; } = "";

	[Parameter]
	public int AnoterParam { get; set; }

	private System.Threading.Timer? Timer;

	public List<Server>? servers;

	public override Task SetParametersAsync(ParameterView parameters)
	{
		if (parameters.TryGetValue<string>("CityName", out var cityName))
		{
			if (cityName != CityName)
			{
				base.SetParametersAsync(parameters);
			}
		}

		if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter))
		{
			if (searchFilter != ServerFilter)
			{
				base.SetParametersAsync(parameters);
			}
		}

		return Task.CompletedTask;
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		if (string.IsNullOrEmpty(ServerFilter))
		{
			servers = ServerRepository.GetServersByCity(CityName ?? "Toronto");
		}

		else
		{
			servers = ServerRepository.SearchServers(ServerFilter);
		}

	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (firstRender)
		{
			if (string.IsNullOrEmpty(this.ServerFilter))
			{
				servers = ServerRepository.GetServersByCity(CityName ?? "Toronto");
			}
			else
			{
				servers = ServerRepository.SearchServers(ServerFilter);
			}

			StateHasChanged();

			Timer = new System.Threading.Timer(_ =>
			{
				base.InvokeAsync(StateHasChanged);
			}, null, 2000, 2000);
		}
	}

}
