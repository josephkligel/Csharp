@inject NavigationManager NavigationManager

@if(Server != null)
{

    <li @key="Server.ServerId" style="background-color: @GetBackgroundColor()">
        @Server.Name in @Server.City is
        <span style="color:@(Server.IsOnline ? "green" : "red")">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        &nbsp;
        @if (Server.IsOnline)
        {
            <button type="button"
                    class="btn btn-outline-danger"
                    @onclick="@(() => {Server.IsOnline = false;})">
                    Turn Off
            </button>
        }
        else
        {
            <button type="button"
                    class="btn btn-outline-success"
                    @onclick="@(() => {Server.IsOnline = true;})">
                    Turn On
            </button>
        }
        &nbsp;
        @if (Server.IsOnline)
        {

            Random rnd = new Random();
            int randomNumber = rnd.Next(0, 500);
            <text>@randomNumber</text>
        }
        else
        {
            <text>N/A</text>
        }
        &nbsp;
        <a href="/servers/@Server.ServerId" class="btn btn-link">Edit</a>
        &nbsp;
        @*@<button type="button" class="btn btn-link" @onclick="@(() => this.editingServer = !this.editingServer)">Edit</button>*@
        &nbsp;
        <EditForm Model="Server"
                  FormName="@($"form-name-{Server.ServerId}")"
                  OnValidSubmit="@(() => {DeleteServer(Server.ServerId);})">
            <button type="submit" class="btn btn-primary">Delete</button>
        </EditForm>
    </li>

    @* 
    @if (editingServer)
    {
        <BlazorDeepDive.Components.Pages.EditServer 
        Id="this.Server.ServerId"></BlazorDeepDive.Components.Pages.EditServer>
    }
    *@
}


@code {
    //private bool editingServer = false;

    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name="SelectedCity")]
    public string? SelectedCity { get; set; }

    public void ChangeStatus()
    {
        if(Server != null)
            this.Server.IsOnline = !this.Server.IsOnline;
    }

    public async Task DeleteServer(int ServerId)
    {
        if (ServerId > 0)
        {
            ServerRepository.DeleteServer(ServerId);
            await Task.Delay(100);
            NavigationManager.NavigateTo("/Servers", true);
        }
    }

    private string GetBackgroundColor()
    {
        Console.WriteLine(SelectedCity);
        if(SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }
        } 
        else
        {
            return "white";    
        }
    }
}
