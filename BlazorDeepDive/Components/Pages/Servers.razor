@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br />
<br />
<div class="container-fluid text-center">
    <div class="row">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
                    <img class="card-img-top" src="@($"images/{city}.png")" alt="Card image cap">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city);})">@city</button>
                    </div>
                
                </div>
            </div>
        }


    </div>
</div>

<br />

<br />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilterChange"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<ul>
    @foreach(var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color:@(server.IsOnline ? "green" : "red")"> 
                @(server.IsOnline ? "online" : "offline" )
            </span>
            <a href="servers/edit/@server.ServerId">Edit</a>
            <EditForm 
                Model="server" 
                FormName="@($"form-name-{server.ServerId}")"
                OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    }
</ul>

<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
    private List<Server> servers = ServerRepository.GetServersByCity("Toronto");
    private List<string> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string serverFilter = "";

    public async Task DeleteServer(int serverId)
    {
        if(serverId > 0)
        {
            ServerRepository.DeleteServer(serverId);
            await Task.Delay(100);
            NavigationManager.NavigateTo("/servers");
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;

        this.servers = ServerRepository.GetServersByCity(this.selectedCity);
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }

    private void HandleSearch()
    {
        this.servers = ServerRepository.SearchServers(serverFilter);

        this.selectedCity = string.Empty;
    }
}
